{"version":3,"file":"static/js/442.7310fc6d.chunk.js","mappings":"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","sources":["components/views/SurveyPage.jsx","sendMessage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport bg from \"../../images/bg-Question-min.jpg\";\nimport data from \"../../text-content/questions/survey.json\";\nimport { sendMessage } from \"../../sendMessage\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\n\nconst SurveyPage = ({ onClose, lang, setIsModalThanksOpen }) => {\n  const surveyData = data[lang] || [];\n  const controls = data.controls[lang];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [selectedOption, setSelectedOption] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    document.body.style.overflow = \"hidden\";\n\n    return () => {\n      document.body.style.overflow = \"auto\";\n    };\n  }, []);\n\n  const handleOptionSelect = (option) => {\n    setAnswers((prevAnswers) => ({\n      ...prevAnswers,\n      [currentQuestion]: option,\n    }));\n    setSelectedOption(option);\n    setCurrentQuestion((prevQuestion) =>\n      Math.min(prevQuestion + 1, surveyData.length - 1)\n    );\n  };\n\n  const handleInputChange = (event) => {\n    setAnswers((prevAnswers) => ({\n      ...prevAnswers,\n      [currentQuestion]: event.target.value,\n    }));\n  };\n\n  const handleBack = () => {\n    if (currentQuestion <= 0) {\n      navigate(\"/\");\n      return;\n    }\n    setCurrentQuestion((prevQuestion) => Math.max(0, prevQuestion - 1));\n    setSelectedOption(null);\n  };\n\n  const handleNext = () => {\n    if (\n      surveyData[currentQuestion]?.type === \"input\" &&\n      !answers[currentQuestion]\n    ) {\n      alert(controls.noNumber);\n    } else {\n      setCurrentQuestion((prevQuestion) =>\n        Math.min(prevQuestion + 1, surveyData.length - 1)\n      );\n    }\n  };\n\n  const handleInputQuestions = () => {\n    const inputQuestions = surveyData.filter(\n      (question) => question.type === \"input\"\n    );\n    const emptyInputQuestions = inputQuestions.filter(\n      (question) => !answers[question.id]\n    );\n\n    if (emptyInputQuestions.length > 0) {\n      alert(\"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞.\");\n    }\n  };\n\n  const handleFinish = () => {\n    const currentTime = new Date().toLocaleTimeString();\n    // console.log(\n    //   `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${answers[5]} –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –æ –ø–æ–¥–±–æ—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ ${currentTime} –Ω–∞ ${lang} —è–∑—ã–∫–µ –Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ! –ï–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω: ${answers[6]} –∏ –æ–Ω –±—ã —Ö–æ—Ç–µ–ª —á—Ç–æ –± –≤—ã —Å –Ω–∏–º —Å–≤—è–∑–∞–ª–∏—Å—å —á–µ—Ä–µ–∑ ${answers[7]}. –û–Ω –≤—ã–±—Ä–∞–ª —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: ${answers[0]}, ${answers[1]}, ${answers[2]}, ${answers[3]}, ${answers[4]}`\n    // );\n\n    const message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${answers[4]} –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –æ –ø–æ–¥–±–æ—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ ${currentTime} –Ω–∞ ${lang} —è–∑—ã–∫–µ –Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ! \\n–ï–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω: ${answers[5]} –∏ –æ–Ω –±—ã —Ö–æ—Ç–µ–ª —á—Ç–æ –± –≤—ã —Å –Ω–∏–º —Å–≤—è–∑–∞–ª–∏—Å—å —á–µ—Ä–µ–∑ ${answers[6]}. \\n–û–Ω –≤—ã–±—Ä–∞–ª —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: ${answers[0]}, ${answers[1]}, ${answers[2]}, ${answers[3]}.`;\n    sendMessage(message);\n    console.log(\"üöÄ ~ handleFinish ~ message:\", message);\n    // –¢–£–¢ –î–ê–ù–ù–´–ï –Æ–ó–ï–†–ê\n    navigate(\"/thanks\");\n  };\n  return (\n    <div\n      style={{ backgroundImage: `url(${bg})` }}\n      className=\"p-4 bg-no-repeat bg-cover fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50\"\n    >\n      <div className=\"bg-cover bg-blur\"></div>\n      <div className=\"bg-white p-6 rounded-lg z-10 max-w-md w-full relative\">\n        <NavLink\n          to=\"/\"\n          className=\"text-4xl absolute top-0 right-2 text-gray-500 hover:text-gray-700\"\n        >\n          &times;\n        </NavLink>\n        <div className=\"mb-6\">\n          <h2 className=\"text-2xl font-semibold mb-4\">\n            {surveyData[currentQuestion]?.question}\n          </h2>\n          <div className=\"flex flex-col\">\n            {surveyData[currentQuestion]?.options ? (\n              surveyData[currentQuestion].options.map((option, index) => (\n                <button\n                  key={index}\n                  className={`hover:bg-blue-600 ${\n                    selectedOption === option\n                      ? \"bg-orange-500 hover:bg-orange-400\"\n                      : \"bg-blue-500\"\n                  } hover:bg-blue-600 text-white py-2 px-4 rounded mb-2`}\n                  onClick={() => handleOptionSelect(option)}\n                >\n                  {option}\n                </button>\n              ))\n            ) : (\n              <input\n                type=\"text\"\n                value={answers[currentQuestion] || \"\"}\n                onChange={handleInputChange}\n                className=\"border border-gray-300 p-2 w-full\"\n              />\n            )}\n          </div>\n        </div>\n        <p>{currentQuestion + 1}/7</p>\n        <div className=\"flex flex-col\">\n          {surveyData[currentQuestion]?.type === \"input\" && (\n            <button\n              onClick={\n                currentQuestion === surveyData.length - 1\n                  ? handleInputQuestions\n                  : handleNext\n              }\n              className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mb-2\"\n            >\n              {controls.next}\n            </button>\n          )}\n          {currentQuestion === 6 && (\n            <button\n              onClick={handleFinish}\n              className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mb-2\"\n            >\n              {controls.finish}\n            </button>\n          )}\n          <button\n            onClick={handleBack}\n            className=\"bg-gray-400 hover:bg-gray-500 text-white py-2 px-4 rounded mb-2 text-center\"\n          >\n            {currentQuestion === 0 ? controls.exit : controls.back}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SurveyPage;\n","// import axios from \"axios\";\n\nexport const sendMessage = (message) => {\n  // const TOKEN = \"bot father\";\n  // const CHAT_ID = \"raw data\";\n  // const URL_API = `https://api.telegram.org/bot${TOKEN}/sendMessage`;\n  alert('This is dev version of website. No data was sent.')\n  // axios\n  //   .post(URL_API, {\n  //     chat_id: CHAT_ID,\n  //     parse_mode: \"html\",\n  //     text: message,\n  //   })\n  //   .then((res) => { })\n  //   .catch((err) => { });\n};\n"],"names":["_ref","_surveyData$currentQu2","_surveyData$currentQu3","_surveyData$currentQu4","onClose","lang","setIsModalThanksOpen","surveyData","data","controls","currentQuestion","setCurrentQuestion","useState","answers","setAnswers","selectedOption","setSelectedOption","navigate","useNavigate","useEffect","document","body","style","overflow","_jsxs","backgroundImage","concat","bg","className","children","_jsx","NavLink","to","question","options","map","option","index","onClick","prevAnswers","prevQuestion","Math","min","length","handleOptionSelect","type","value","onChange","event","target","handleInputQuestions","filter","id","alert","handleNext","_surveyData$currentQu","noNumber","next","handleFinish","currentTime","Date","toLocaleTimeString","message","sendMessage","console","log","finish","handleBack","max","exit","back"],"sourceRoot":""}